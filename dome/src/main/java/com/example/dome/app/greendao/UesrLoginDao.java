package com.example.dome.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dome.dbbean.UesrLogin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UESR_LOGIN".
*/
public class UesrLoginDao extends AbstractDao<UesrLogin, Long> {

    public static final String TABLENAME = "UESR_LOGIN";

    /**
     * Properties of entity UesrLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property OfficeName = new Property(2, String.class, "officeName", false, "OFFICE_NAME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property UserLogo = new Property(4, String.class, "userLogo", false, "USER_LOGO");
    }


    public UesrLoginDao(DaoConfig config) {
        super(config);
    }
    
    public UesrLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UESR_LOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"OFFICE_NAME\" TEXT," + // 2: officeName
                "\"TITLE\" TEXT," + // 3: title
                "\"USER_LOGO\" TEXT);"); // 4: userLogo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UESR_LOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UesrLogin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String officeName = entity.getOfficeName();
        if (officeName != null) {
            stmt.bindString(3, officeName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String userLogo = entity.getUserLogo();
        if (userLogo != null) {
            stmt.bindString(5, userLogo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UesrLogin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String officeName = entity.getOfficeName();
        if (officeName != null) {
            stmt.bindString(3, officeName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String userLogo = entity.getUserLogo();
        if (userLogo != null) {
            stmt.bindString(5, userLogo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UesrLogin readEntity(Cursor cursor, int offset) {
        UesrLogin entity = new UesrLogin( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // officeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // userLogo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UesrLogin entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOfficeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UesrLogin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UesrLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UesrLogin entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
